// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: server/services/liefer.proto

package services

import (
	context "context"
	types "github.com/lxgr-linux/liefer/server/types"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Liefer_Deliver_FullMethodName = "/liefer.server.services.Liefer/Deliver"
)

// LieferClient is the client API for Liefer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LieferClient interface {
	Deliver(ctx context.Context, in *types.Payload, opts ...grpc.CallOption) (grpc.ServerStreamingClient[types.Progress], error)
}

type lieferClient struct {
	cc grpc.ClientConnInterface
}

func NewLieferClient(cc grpc.ClientConnInterface) LieferClient {
	return &lieferClient{cc}
}

func (c *lieferClient) Deliver(ctx context.Context, in *types.Payload, opts ...grpc.CallOption) (grpc.ServerStreamingClient[types.Progress], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Liefer_ServiceDesc.Streams[0], Liefer_Deliver_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[types.Payload, types.Progress]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Liefer_DeliverClient = grpc.ServerStreamingClient[types.Progress]

// LieferServer is the server API for Liefer service.
// All implementations must embed UnimplementedLieferServer
// for forward compatibility.
type LieferServer interface {
	Deliver(*types.Payload, grpc.ServerStreamingServer[types.Progress]) error
	mustEmbedUnimplementedLieferServer()
}

// UnimplementedLieferServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedLieferServer struct{}

func (UnimplementedLieferServer) Deliver(*types.Payload, grpc.ServerStreamingServer[types.Progress]) error {
	return status.Errorf(codes.Unimplemented, "method Deliver not implemented")
}
func (UnimplementedLieferServer) mustEmbedUnimplementedLieferServer() {}
func (UnimplementedLieferServer) testEmbeddedByValue()                {}

// UnsafeLieferServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LieferServer will
// result in compilation errors.
type UnsafeLieferServer interface {
	mustEmbedUnimplementedLieferServer()
}

func RegisterLieferServer(s grpc.ServiceRegistrar, srv LieferServer) {
	// If the following call pancis, it indicates UnimplementedLieferServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Liefer_ServiceDesc, srv)
}

func _Liefer_Deliver_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(types.Payload)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(LieferServer).Deliver(m, &grpc.GenericServerStream[types.Payload, types.Progress]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Liefer_DeliverServer = grpc.ServerStreamingServer[types.Progress]

// Liefer_ServiceDesc is the grpc.ServiceDesc for Liefer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Liefer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "liefer.server.services.Liefer",
	HandlerType: (*LieferServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Deliver",
			Handler:       _Liefer_Deliver_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "server/services/liefer.proto",
}
